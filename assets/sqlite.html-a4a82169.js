import{_ as t,X as d,Y as e,a0 as a}from"./framework-e45c54a7.js";const E={},n=a('<h1 id="sqlite常用指令" tabindex="-1"><a class="header-anchor" href="#sqlite常用指令" aria-hidden="true">#</a> sqlite常用指令</h1><h2 id="指令应当服务于查询-因此格式最好是使用-faq-进行" tabindex="-1"><a class="header-anchor" href="#指令应当服务于查询-因此格式最好是使用-faq-进行" aria-hidden="true">#</a> 指令应当服务于查询，因此格式最好是使用 FAQ 进行</h2><h3 id="如何查找" tabindex="-1"><a class="header-anchor" href="#如何查找" aria-hidden="true">#</a> 如何查找</h3><h3 id="如何更新" tabindex="-1"><a class="header-anchor" href="#如何更新" aria-hidden="true">#</a> 如何更新</h3><h3 id="如何删除表" tabindex="-1"><a class="header-anchor" href="#如何删除表" aria-hidden="true">#</a> 如何删除表</h3><h3 id="如何删除表中的数据" tabindex="-1"><a class="header-anchor" href="#如何删除表中的数据" aria-hidden="true">#</a> 如何删除表中的数据</h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><table><thead><tr><th>指令</th><th>含义</th><th>用法</th></tr></thead><tbody><tr><td>SELECT</td><td>从表中选取数据</td><td><code>SELECT column1, column2, ... FROM table_name;</code></td></tr><tr><td>INSERT INTO</td><td>插入新的行到表中</td><td><code>INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);</code></td></tr><tr><td>UPDATE</td><td>更新表中现有的行</td><td><code>UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;</code></td></tr><tr><td>DELETE FROM</td><td>从表中删除行</td><td><code>DELETE FROM table_name WHERE co ndition;</code></td></tr><tr><td>CREATE TABLE</td><td>创建新表格</td><td><code>CREATE TABLE table_name (column1 datatype, column2 datatype, ...);</code></td></tr><tr><td>DROP TABLE</td><td>删除整个表格</td><td><code>DROP TABLE table_name;</code></td></tr><tr><td>ALTER TABLE</td><td>修改表结构</td><td><code>ALTER TABLE table_name ADD column_name datatype;</code></td></tr><tr><td>INDEX</td><td>在列上创建索引</td><td><code>CREATE INDEX index_name ON table_name (column_name);</code></td></tr><tr><td>VIEW</td><td>基于 SQL 语句的可视化表格</td><td><code>CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;</code></td></tr><tr><td>NULL</td><td>不知道或无效的值</td><td><code>SELECT column1, column2, ... FROM table_name WHERE column_name IS NULL;</code></td></tr><tr><td>NOT NULL</td><td>必须包含一个值</td><td><code>CREATE TABLE table_name (column1 datatype NOT NULL, column2 datatype NOT NULL, ...);</code></td></tr><tr><td>UNIQUE</td><td>列中所有值都必须唯一</td><td><code>CREATE TABLE table_name (column1 datatype UNIQUE, column2 datatype UNIQUE, ...);</code></td></tr><tr><td>PRIMARY KEY</td><td>表中每行唯一标识</td><td><code>CREATE TABLE table_name (column1 datatype PRIMARY KEY, column2 datatype, ...);</code></td></tr><tr><td>FOREIGN KEY</td><td>用于在两个表之间创建关联</td><td><code>CREATE TABLE table1 (column1 datatype PRIMARY KEY, column2 datatype, ...); CREATE TABLE table2 (column1 datatype, column2 datatype, ..., FOREIGN KEY (column1) REFERENCES table1(column1));</code></td></tr><tr><td>CHECK</td><td>确保列中的值满足特定条件</td><td><code>CREATE TABLE table_name (column1 datatype CHECK (condition), column2 datatype, ...);</code></td></tr><tr><td>LIKE</td><td>在 WHERE 子句中使用通配符</td><td><code>SELECT column1, column2, ... FROM table_name WHERE column_name LIKE &#39;pattern&#39;;</code></td></tr><tr><td>IN</td><td>在 WHERE 子句中设置多个可能值</td><td><code>SELECT column1, column2, ... FROM table_name WHERE column_name IN (value1, value2, ...);</code></td></tr><tr><td>BETWEEN</td><td>在 WHERE 子句中选择一个范围</td><td><code>SELECT column1, column2, ... FROM table_name WHERE column_name BETWEEN value1 AND value2;</code></td></tr><tr><td>EXISTS</td><td>检查子查询是否至少返回一行</td><td><code>SELECT column1, column2, ... FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);</code></td></tr><tr><td>COUNT()</td><td>返回记录数</td><td><code>SELECT COUNT(column_name) FROM table_name WHERE condition;</code></td></tr><tr><td>AVG()</td><td>返回平均值</td><td><code>SELECT AVG(column_name) FROM table_name WHERE condition;</code></td></tr><tr><td>SUM()</td><td>返回总和</td><td><code>SELECT SUM(column_name) FROM table_name WHERE condition;</code></td></tr><tr><td>MAX()</td><td>返回最大值</td><td><code>SELECT MAX(column_name) FROM table_name WHERE condition;</code></td></tr><tr><td>MIN()</td><td>返回最小值</td><td><code>SELECT MIN(column_name) FROM table_name WHERE condition;</code></td></tr><tr><td>GROUP BY</td><td>按列进行分组</td><td><code>SELECT column1, COUNT(column2) FROM table_name GROUP BY column1;</code></td></tr><tr><td>HAVING</td><td>在 GROUP BY 子句之后使用聚合函数来过滤数据</td><td><code>SELECT column1, COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) &gt; value;</code></td></tr><tr><td>ORDER BY</td><td>将结果按指定列排序</td><td>`SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC</td></tr><tr><td>AS</td><td>为列或表设置别名</td><td><code>SELECT column_name AS alias_name FROM table_name;</code></td></tr><tr><td>INNER JOIN</td><td>只返回匹配的行</td><td><code>SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;</code></td></tr><tr><td>LEFT JOIN</td><td>返回左表中所有的行和右表中匹配的行</td><td><code>SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;</code></td></tr><tr><td>RIGHT JOIN</td><td>返回右表中所有的行和左表中匹配的行</td><td><code>SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;</code></td></tr><tr><td>FULL OUTER JOIN</td><td>返回两个表中的所有行，根据关联条件将相应行组合在一起</td><td><code>SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;</code></td></tr><tr><td>UNION</td><td>合并两个 SELECT 语句的结果集</td><td><code>SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;</code></td></tr><tr><td>UNION ALL</td><td>合并两个 SELECT 语句的结果集，包括重复行</td><td><code>SELECT column_name(s) FROM table1 UNION ALL SELECT column_name(s) FROM table2;</code></td></tr><tr><td>LIMIT</td><td>指定返回的记录数</td><td><code>SELECT column1, column2, ... FROM table_name LIMIT number;</code></td></tr></tbody></table><h2 id="生成-2" tabindex="-1"><a class="header-anchor" href="#生成-2" aria-hidden="true">#</a> 生成 2</h2><p>非常抱歉，下面补充完整50个sqlite指令、含义和用法的表格</p><table><thead><tr><th>指令</th><th>含义</th><th>用法</th></tr></thead><tbody><tr><td>ATTACH DATABASE</td><td>将另一个数据库附加到当前数据库</td><td>ATTACH DATABASE &#39;database file path&#39; AS database_name;</td></tr><tr><td>DETACH DATABASE</td><td>从当前会话中分离一个附加的数据库</td><td>DETACH DATABASE database_name;</td></tr><tr><td>SAVEPOINT</td><td>为事务设置保存点</td><td>SAVEPOINT save_point_name</td></tr><tr><td>ROLLBACK TO SAVEPOINT</td><td>回滚到指定的保存点</td><td>ROLLBACK TO SAVEPOINT save_point_name</td></tr><tr><td>RELEASE SAVEPOINT</td><td>删除指定的保存点</td><td>RELEASE SAVEPOINT save_point_name</td></tr><tr><td>CASE</td><td>在 SQL 语句中定义条件和返回值之间的关系</td><td>SELECT column_name, CASE WHEN condition THEN &#39;return value&#39; ELSE &#39;return value&#39; END FROM table_name;</td></tr><tr><td>IFNULL</td><td>返回两个参数中不是NULL的那个</td><td>SELECT column_name, IFNULL(column_name_to_check, &#39;not available&#39;) FROM table_name;</td></tr><tr><td>COALESCE</td><td>返回参数列表中第一个非NULL参数</td><td>SELECT COALESCE(column1, column2, ..., columnN) FROM table_name;</td></tr><tr><td>RANDOM</td><td>返回伪随机整数</td><td>SELECT RANDOM();</td></tr><tr><td>ABS</td><td>返回给定数的绝对值</td><td>SELECT ABS(column_name) FROM table_name;</td></tr><tr><td>ROUND</td><td>返回给定数的四舍五入值</td><td>SELECT ROUND(column_name, decimals) FROM table_name;</td></tr><tr><td>LENGTH</td><td>返回文本字段中的字符数</td><td>SELECT LENGTH(column_name) FROM table_name;</td></tr><tr><td>SUBSTR</td><td>返回字符串中的一部分</td><td>SELECT SUBSTR(column_name, start_position, length) FROM table_name;</td></tr><tr><td>TRIM</td><td>从字符串的开始和/或结尾删除空格</td><td>SELECT TRIM(BOTH &#39; &#39; FROM column_name) FROM table_name;</td></tr><tr><td>UPPER</td><td>将字符串转换为大写字母</td><td>SELECT UPPER(column_name) FROM table_name;</td></tr><tr><td>LOWER</td><td>将字符串转换为小写字母</td><td>SELECT LOWER(column_name) FROM table_name;</td></tr><tr><td>REPLACE</td><td>将文本中的一个子字符串替换为另一个</td><td>SELECT REPLACE(column_name, old_value, new_value) FROM table_name;</td></tr><tr><td>GLOB</td><td>使用通配符匹配来返回值</td><td>SELECT column_name FROM table_name WHERE column_name GLOB &#39;pattern&#39;;</td></tr><tr><td>LAST_INSERT_ROWID</td><td>返回最近插入行的 ROWID</td><td>SELECT LAST_INSERT_ROWID();</td></tr><tr><td>ROW_NUMBER</td><td>在结果集中给每行分配一个唯一的序列号</td><td>SELECT ROW_NUMBER() OVER (ORDER BY column_name) FROM table_name;</td></tr><tr><td>CAST</td><td>将一个数据类型转换为另一个数据类型</td><td>SELECT CAST(column_name AS new_data_type) FROM table_name;</td></tr><tr><td>DATE</td><td>从文本字符串中提取日期</td><td>SELECT DATE(column_name, modifier) FROM table_name;</td></tr><tr><td>DATETIME</td><td>从文本字符串中提取日期和时间</td><td>SELECT DATETIME(column_name, modifier) FROM table_name;</td></tr><tr><td>STRFTIME</td><td>将日期和时间格式化为指定的字符串格式</td><td>SELECT STRFTIME(&#39;%Y-%m-%d %H:%M:%S&#39;, &#39;now&#39;) FROM table_name;</td></tr><tr><td>VACUUM</td><td>优化数据库并释放未使用的磁盘空间</td><td>VACUUM;</td></tr><tr><td>ANALYZE</td><td>收集统计信息以优化查询性能</td><td>ANALYZE;</td></tr><tr><td>PRAGMA</td><td>设置和查询SQLite库状态</td><td>PRAGMA pragma_name = value;</td></tr><tr><td>REINDEX</td><td>重建所有索引</td><td>REINDEX;</td></tr><tr><td>ETC.</td><td>等等...</td><td>见官网文档</td></tr></tbody></table><p>以上50个指令可以满足大部分 SQLite 数据库操作的需求。</p>',12),o=[n];function l(c,m){return d(),e("div",null,o)}const T=t(E,[["render",l],["__file","sqlite.html.vue"]]);export{T as default};
